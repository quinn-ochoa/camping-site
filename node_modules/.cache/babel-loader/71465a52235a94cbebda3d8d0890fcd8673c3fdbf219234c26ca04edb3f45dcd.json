{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import { COMMENTS } from '../../app/shared/COMMENTS';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async () => {\n  const response = await fetch(baseUrl + 'comments');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  return data;\n});\nexport const postComment = createAsyncThunk('comments/postComment', async (comment, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  const response = await fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  dispatch(addComment(data));\n});\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      console.log('addComment action.payload', action.payload);\n      console.log('addComment state.commentsArray', state.commentsArray);\n      const newComment = {\n        id: state.commentsArray.length + 1,\n        ...action.payload\n      };\n      state.commentsArray.push(newComment);\n    }\n  },\n  extraReducers: {\n    [fetchComments.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.commentsArray = action.payload;\n    },\n    [fetchComments.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }\n  },\n  extraReducers: {\n    [postComment.rejected]: (state, action) => {\n      alert('');\n    }\n  }\n});\nexport const commentsReducer = commentsSlice.reducer;\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const selectCommentsByCampsiteId = campsiteId => state => {\n  return state.comments.commentsArray.filter(comment => comment.campsiteId === parseInt(campsiteId));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchComments","response","fetch","ok","Promise","reject","status","data","json","postComment","comment","_ref","dispatch","method","body","JSON","stringify","headers","addComment","initialState","commentsArray","isLoading","errMsg","commentsSlice","name","reducers","state","action","console","log","payload","newComment","id","length","push","extraReducers","pending","fulfilled","rejected","error","message","alert","commentsReducer","reducer","actions","selectCommentsByCampsiteId","campsiteId","comments","filter","parseInt"],"sources":["/Users/quynhletruc/Desktop/NucampFolder/3-React/nucampsite/src/features/comments/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import { COMMENTS } from '../../app/shared/COMMENTS';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\nexport const fetchComments = createAsyncThunk(\n    'comments/fetchComments',\n    async () => {\n        const response = await fetch(baseUrl + 'comments');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status);\n        }\n        const data = await response.json();\n        return data;\n    }\n);\n\nexport const postComment = createAsyncThunk(\n    'comments/postComment',\n    async (comment, { dispatch }) => {\n        const response = await fetch(\n            baseUrl + 'comments',\n            {\n                method: 'POST',\n                body: JSON.stringify(comment),\n                headers: { 'Content-Type': 'application/json' }\n            }\n        );\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status);\n        }\n        const data = await response.json();\n        dispatch(addComment(data));\n    }\n);\n\nconst initialState = {\n    commentsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState,\n    reducers: {\n        addComment: (state, action) => {\n            console.log('addComment action.payload', action.payload);\n            console.log('addComment state.commentsArray', state.commentsArray);\n            const newComment = {\n                id: state.commentsArray.length + 1,\n                ...action.payload\n            };\n            state.commentsArray.push(newComment);\n        }\n    },\n    extraReducers: {\n        [fetchComments.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [fetchComments.fulfilled]: (state, action) => {\n            state.isLoading = false;\n            state.errMsg = '';\n            state.commentsArray = action.payload;\n        },\n        [fetchComments.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.errMsg = action.error ? action.error.message : 'Fetch failed';\n        }\n    },\n    extraReducers:{\n        [postComment.rejected]:(state,action)=>{\n            alert(\n''\n            );\n        }\n    }\n\n});\n\nexport const commentsReducer = commentsSlice.reducer;\n\nexport const { addComment } = commentsSlice.actions;\n\nexport const selectCommentsByCampsiteId = (campsiteId) => (state) => {\n    return state.comments.commentsArray.filter(\n        (comment) => comment.campsiteId === parseInt(campsiteId)\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}